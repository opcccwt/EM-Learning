#!/usr/bin/env python

import sys
import random
import pybn.net as net

from collections import defaultdict

def bit_string(num,n):
    bits = []
    for pos in xrange(n):
        bit = num % 2
        num = num / 2
        bits.append(str(bit))
    return "".join(bits)

def save_smile_data(filename,names,dataset):
    f = open(filename,'w')
    f.write(','.join(names))
    f.write('\n')
    for instance in dataset:
        f.write(",".join(instance))
        f.write("\n")
    f.close()

def save_hugin_data(filename,names,dataset):
    f = open(filename,'w')

    D = defaultdict(lambda: 0)
    for instance in dataset:
        D[instance] += 1

    instances = D.keys()
    instances.sort()

    f.write('#\t')
    f.write('\t'.join(names))
    f.write('\n')
    for instance in instances:
        f.write("%d\t" % D[instance])
        f.write("\t".join(instance))
        f.write("\n")
    f.close()

def random_pr(k,psi=1.0):
    pr = [ random.gammavariate(psi,1) for i in xrange(k) ]
    #pr = [ -math.log(random.random()) for i in xrange(k) ]
    pr_sum = sum(pr)
    pr = [ p/pr_sum for p in pr ]
    return pr

def str_random_pr(k,psi=1.0):
    pr = random_pr(k,psi=psi)
    return [ "%f" % p for p in pr ]

def sample(pr):
    q = random.random()
    cur = 0
    for i,p in enumerate(pr):
        cur += p
        if q <= cur:
            return i
    return i

if len(sys.argv) != 4:
    print "usage: %s [n] [log2 N] [k] [seed]" % sys.argv[0]
    print "    n: number of nodes"
    print "    N: dataset size (2^N)"
    print "    k: # of states"
    print " seed: random number seed"
    exit(1)

n = int(sys.argv[1])
logN = int(sys.argv[2])
N = 2**logN
k = int(sys.argv[3])
seed = int(sys.argv[4])

print "parameters:", n,N,k,seed

net_type = "BAYES"
var_sizes = [k]*(2*n+1)
pot_domains = [[0]] + \
              [ [var-1,var] for var in xrange(1,n+1) ] + \
              [[0,n+1]] + \
              [ [var-1,var] for var in xrange(n+2,2*n+1) ]

pot0 = str_random_pr(k)
all_pots = [pot0]
for j in xrange(2*n):
    pot = []
    for i in xrange(k): pot.extend(str_random_pr(k))
    all_pots.append(pot)

bn = net.Network(net_type,var_sizes,pot_domains,all_pots)

f = open('wedge-%d.net' % n,'w')
f.write(bn.hugin_net())
f.close()

f = open('wedge-%d.uai' % n,'w')
f.write(str(bn))
f.close()

names = [ 'x%d' % var for var in xrange(2*n+1) ]

prx = random_pr(k)
pry = [ random_pr(k) for i in xrange(k) ]
prz = [ random_pr(k) for i in xrange(k) ]

print "x", " ".join( '%.6f' % p for p in prx )
print "y", " ".join( '%.6f' % p for p in pry[0] )
print "z", " ".join( '%.6f' % p for p in prz[0] )

dataset = []
for i in xrange(N):
    #st = bit_string(i,n)
    #st = [ "s"+bit for bit in st ]
    #st = [ state if i % 2 == 0 else "*" for i,state in enumerate(st) ]
    #x = random.randint(0,k-1)
    x = sample(prx)
    y = sample(pry[x])
    z = sample(prz[x])
    st = ["*"] + \
         [ "s%d" % y ] + [ "s%d" % random.randint(0,k-1) for i in xrange(n-1) ] + \
         [ "s%d" % z ] + [ "s%d" % random.randint(0,k-1) for i in xrange(n-1) ]
    #st = ["*"] + [ "s%d" % random.randint(0,1) for i in xrange(2*n) ]
    dataset.append(tuple(st))

# write smile dataset
filename = 'wedge-%d-%d.smile.train' % (n,logN)
save_smile_data(filename,names,dataset)

# write hugin dataset
filename = 'wedge-%d-%d.hugin.train' % (n,logN)
save_hugin_data(filename,names,dataset)

########################################
# SIMPLIFIED NETWORK
########################################

# WEDGE
net_type = "BAYES"
var_sizes = [k]*3
pot_domains = [[0],[0,1],[0,2]]
pots =  [ pot0,pot,pot ]

bn = net.Network(net_type,var_sizes,pot_domains,pots)

f = open('wedge-%d.simple-a.net' % n,'w')
f.write(bn.hugin_net())
f.close()

# CHAIN
net_type = "BAYES"
var_sizes = [k]*n
pot_domains = [[0]] + [ [var-1,var] for var in xrange(1,n) ]
pots =  [ pot0 ] + [ pot ]*(n-1)

bn = net.Network(net_type,var_sizes,pot_domains,pots)

f = open('wedge-%d.simple-b.net' % n,'w')
f.write(bn.hugin_net())
f.close()

# WEDGE DATA
names = [ 'x%d' % var for var in xrange(3) ]
new_dataset = []
for instance in dataset:
    new_instance = [instance[0],instance[1],instance[n+1]]
    new_dataset.append(new_instance)

filename = 'wedge-%d-%d.simple-a.smile.train' % (n,logN)
save_smile_data(filename,names,new_dataset)

# CHAINS DATA
names = [ 'x%d' % var for var in xrange(n) ]
new_dataset = []
for instance in dataset:
    new_instance = instance[1:(n+1)]
    new_dataset.append(new_instance)

filename = 'wedge-%d-%d.simple-b.smile.train' % (n,logN)
save_smile_data(filename,names,new_dataset)

new_dataset = []
for instance in dataset:
    new_instance = instance[(n+1):]
    new_dataset.append(new_instance)

filename = 'wedge-%d-%d.simple-c.smile.train' % (n,logN)
save_smile_data(filename,names,new_dataset)

